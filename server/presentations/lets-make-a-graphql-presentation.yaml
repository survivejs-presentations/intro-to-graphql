- theme: graphql-finland
  layout: title
  content:
    title: Let's Make a GraphQL Presentation
    author: Juho Vepsäläinen
- layout: toc
  background:
    asset: client/assets/images/toc.jpg
  content:
    title: Table of Contents
- layout: section
  content:
    title: Background
- layout: embed
  content:
    title: React Finland
    link: https://react-finland.fi/
- layout: embed
  content:
    title: React Finland API
    link: https://api.react-finland.fi/graphql
- layout: embed
  content:
    title: GraphQL Finland
    link: https://graphql-finland.fi/
- layout: embed
  content:
    title: Asset Generator
    link: https://rf-asset-generator.netlify.com/
- layout: embed
  content:
    title: Speaker Presentation
    link: https://rf-asset-generator.netlify.com/presentation/#0
- layout: section
  content:
    title: What is GraphQL?
- layout: embed
  content:
    title: GraphQL
    link: https://graphql.org/
- layout: markdown
  background:
    asset: client/assets/images/switchboard.jpg
    source: https://en.wikipedia.org/wiki/Switchboard_operator#/media/File:Bell_telephone_magazine_(1922)_(14776291573).jpg
  content:
    title: Why GraphQL?
    markup: |
      1. You have multiple consumers
      2. You have multiple legacy APIs and want to unite them
      3. You want to make a GraphQL presentation
- layout: markdown
  background:
    asset: client/assets/images/sdl.jpg
  content:
    title: GraphQL Schema Definition Language (SDL)
    markup: |
      * A definition language is used to define an API
      * Separate language to describe types and their relations
      * In addition code implementing **Queries** and **Mutations** is needed
- layout: section
  content:
    title: Design and Architecture
- layout: markdown
  background:
    asset: client/assets/images/sdd.jpg
  content:
    title: Schema Driven Design
    markup: |
      > Define the API first, the rest will follow
- layout: markdown
  background:
    asset: client/assets/images/design-constraints.jpg
  content:
    title: Design Constaints
    markup: |
      1. Content should be separate from layouts
      2. Content should live on the server behind an API
      3.  It should be possible to replace the frontend
- layout: markdown
  background:
    asset: client/assets/images/presentation.jpg
  content:
    title: What's a `Presentation`?
    markup: |
      ```graphql
      type Presentation {
        id: ID!
        title: String
        slides: [Slide]!
      }

      type Query {
        presentations: [Presentation]!
        presentation(id: ID!): Presentation
        ...
      }
      ```
- layout: grid
  background:
    asset: client/assets/images/slide.jpg
  content:
    title: What's a `Slide`?
    columns:
      - |
        ```graphql
        type Slide {
          # The first slide contains theme
          theme: Theme
          layout: Layout!
          content: ContentType!
          background: Background
          skip: Boolean
        }
        ```
      - |
        ```graphql
        enum Layout {
          TITLE
          SECTION
          EMBED
          MARKDOWN
          GRID
        }

        type Background {
          asset: String!
          source: String
        }
        ```
- layout: markdown
  background:
    asset: client/assets/images/theme.jpg
  content:
    title: What's a `Theme`?
    markup: |
      ```graphql
      type Theme {
        id: ID!
        primaryColor: String!
        secondaryColor: String!
        background: String!
      }

      type Query {
        themes: [Theme]!
        theme(id: ID!): Theme
        ...
      }
      ```
- layout: grid
  background:
    asset: client/assets/images/content.jpg
  content:
    title: What's `Content`?
    columns:
      - |
        ```graphql
        union ContentType =
            TitleContent
          | SectionContent
          | EmbedContent
          | MarkdownContent
          | GridContent

        interface Content {
          title: String
        }
        ```
      - |
        ```graphql
        type TitleContent implements Content {
          title: String
          author: String
        }
        ```
- layout: markdown
  background:
    asset: client/assets/images/presentations.jpg
  content:
    title: What Do Presentations Look Like?
    markup: |
      ```yaml
      - theme: graphql-finland
        layout: title
        content:
          title: Let's Make a GraphQL Presentation
          author: Juho Vepsäläinen
      - layout: toc
        content:
          title: Table of Contents
      ...
      ```
- layout: section
  content:
    title: Layouts
- layout: markdown
  background:
    asset: client/assets/images/title.jpg
  content:
    title: "`title`"
    markup: |
      ### Usually the first slide of a presentation

      ```yaml
      theme: graphql-finland
      layout: title
      content:
        title: Let's Make a GraphQL Presentation
        author: Juho Vepsäläinen
      ```
- layout: markdown
  background:
    asset: client/assets/images/section.jpg
  content:
    title: "`section`"
    markup: |
      ### Section slides between slides

      ```yaml
      layout: section
      content:
        title: Layout Types
      ```
- layout: markdown
  background:
    asset: client/assets/images/toc.jpg
  content:
    title: "`toc`"
    markup: |
      ### Table of Contents generated from sections

      ```yaml
      layout: toc
      content:
        title: Table of Contents
      ```
- layout: markdown
  background:
    asset: client/assets/images/markdown.jpg
  content:
    title: "`markdown`"
    markup: |
      ### Slides with Markdown content

      ```yaml
      layout: markdown
      content:
        title: `markdown`
        markup: |
          > Slides with Markdown content

          ```yaml
          ...
          ```
      ```
- layout: markdown
  background:
    asset: client/assets/images/grid.jpg
  content:
    title: "`grid`"
    markup: |
      ### Slides with Grid content
      #### (only two columns for now)

      ```yaml
      layout: grid
      content:
        title: Column demo
        columns:
          - |
            First column
          - |
            Second column
      ```
- layout: grid
  skip: true
  content:
    title: Graphs
    columns:
      - |
        ```
        graph TD;
          A-->B;
          A-->C;
          B-->D;
          C-->D;
        ```
      - |
        ```graph
        graph TD;
          A-->B;
          A-->C;
          B-->D;
          C-->D;
        ```
- layout: markdown
  background:
    asset: client/assets/images/embed.jpg
  content:
    title: "`embed`"
    markup: |
      > `<iframe>` embeds

      ```yaml
      layout: embed
      content:
        title: GraphQL
        link: https://graphql.org/
      ```
- layout: section
  content:
    title: Features
- layout: markdown
  background:
    asset: client/assets/images/ssr.jpg
  content:
    markup: |
      # Progressive enhancement due to SSR (works without JS)
- layout: markdown
  background:
    asset: client/assets/images/to-pdf.jpg
  content:
    markup: |
      # Prints to PDF as a side effect of the frontend design
- layout: markdown
  background:
    asset: client/assets/images/editing.jpg
  content:
    markup: >
      # Allows editing through the frontend thanks to GraphQL mutations
      connected to the file system (WIP)
- layout: markdown
  background:
    asset: client/assets/images/monorepo.jpg
  content:
    markup: |
      # Supports monorepo style slide authoring
- layout: markdown
  background:
    asset: client/assets/images/theme.jpg
  content:
    markup: |
      # Extensible through layouts and theming
- layout: section
  content:
    title: Left to Do
- layout: markdown
  background:
    asset: https://memegen.link/doge/memes/are_tough.jpg
  content:
    markup: |
      # Refresh browser when backend data changes
- layout: markdown
  background:
    asset: client/assets/images/include.jpg
  content:
    markup: |
      # Add `include`s to compose slides
- layout: markdown
  background:
    asset: client/assets/images/tunnel.jpg
  content:
    markup: |
      # Implement virtualization
- layout: markdown
  background:
    asset: client/assets/images/face.jpg
  content:
    markup: |
      # Experiment with different frontends
      ## Generating to [mdx-deck](https://github.com/jxnblk/mdx-deck) might be nice
- layout: markdown
  background:
    asset: client/assets/images/editing-2.jpg
  content:
    markup: |
      # Explore editing and make it more versatile
- layout: markdown
  background:
    asset: client/assets/images/begin-building.jpg
  content:
    markup: |
      # Begin building websites like this
- layout: section
  content:
    title: Lessons Learned
- layout: markdown
  background:
    asset: client/assets/images/plane.jpg
  content:
    markup: |
      # Schema Driven Design is a powerful approach
- layout: markdown
  background:
    asset: client/assets/images/through.jpg
  content:
    markup: |
      # Separating concerns fosters creativity in design
- layout: markdown
  background:
    asset: client/assets/images/lion.jpg
  content:
    markup: |
      # Frontend doesn't need to contain much logic
- layout: markdown
  background:
    asset: client/assets/images/mother.jpg
  content:
    markup: |
      * Check out
      [https://github.com/survivejs/slides](https://github.com/survivejs/slides)
      to learn more
      * Thank you **#jsconfam18**!

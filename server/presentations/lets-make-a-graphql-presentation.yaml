title: Let's Make a GraphQL Presentation
theme: graphql-finland
---
layout: title
content:
  title: Let's Make a GraphQL Presentation
  author: Juho Vepsäläinen
---
layout: section
content:
  title: Schema Design
---
layout: markdown
content:
  title: GraphQL Schema Definition Language (SDL)
  markup: |
    * A definition language is used to define an API
    * Separate language to describe types and their relations
    * In addition code implementing **Queries** and **Mutations** is needed
---
layout: markdown
content:
  title: What's a `Presentation`?
  markup: |
    ```graphql
    type Presentation {
      id: ID!
      title: String!
      theme: Theme!
      slides: [Slide]!
    }
    ```
---
layout: markdown
content:
  title: What's a `Theme`?
  markup: |
    ```graphql
    type Theme {
      id: ID!
      primaryColor: String!
      secondaryColor: String!
      background: String!
    }
    ```
---
layout: markdown
content:
  title: What's a `Slide`?
  markup: |
    ```graphql
    type Slide {
      layout: Layout!
      content: ContentType!
    }
    ```
---
layout: section
content:
  title: Layouts
---
layout: markdown
content:
  title: Layout types
  markup: |
    * `title` - I.e. the first slide
    * `section` - Section slides between slides
    * `markdown` - Markdown content slides
    * `embed` - `<iframe>` embeds
---
layout: section
content:
  title: What is GraphQL?
---
layout: markdown
content:
  title: Brief History
  # background:
  #  asset: url("assets/images/switchboard.jpg")
  #  source: https://en.wikipedia.org/wiki/Switchboard_operator
  markup: |
    * 1930s - Operators between client and server
    * 2000s - REST between client and server
    * 2010s - GraphQL between client and server
---
layout: embed
content:
  title: GraphQL
  link: https://graphql.org/
---
layout: markdown
content:
  title: Why GraphQL?
  markup: |
    * You have multiple consumers
    * You have multiple legacy APIs and want to unite them
    * You write applications

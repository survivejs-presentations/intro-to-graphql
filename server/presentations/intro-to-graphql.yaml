name: intro-to-graphql
theme: graphql-finland
---
layout: title
content:
  title: Brief Introduction to GraphQL
  author: Juho Vepsäläinen
---
layout: markdown
content:
  title: Topics
  markup: |
    * What is GraphQL?
    * GraphQL Queries
    * GraphQL Schema
    * Implementing a Server
---
layout: section
content:
  title: What is GraphQL?
---
layout: markdown
content:
  title: Brief History
  # background:
  #  asset: url("assets/images/switchboard.jpg")
  #  source: https://en.wikipedia.org/wiki/Switchboard_operator
  markup: |
    * 1930s - Operators between client and server
    * 2000s - REST between client and server
    * 2010s - GraphQL between client and server
---
layout: embed
content:
  title: GraphQL
  link: https://graphql.org/
---
layout: markdown
content:
  title: Why GraphQL?
  markup: |
    * You have multiple consumers
    * You have multiple legacy APIs and want to unite them
    * You write applications
---
layout: markdown
content: {
  markup: |
    > The consumer is always right
---
layout: markdown
content:
  title: Exercises
  markup: |
    1. Find [a couple of  GraphQL APIs online](https://github.com/APIs-guru/graphql-apis).
    2. What sort of functionality do the APIs implement?
    3. What commonalities do the APIs have?
    4. What differences do the APIs have?
---
layout: section
content:
  title: GraphQL Queries
---
layout: markdown
content:
  title: Queries
  markup: |
    ```graphql
    {
      themes {
        primaryColor
      }
      theme(name: "survivejs") {
        primaryColor
        secondaryColor
        background
      }
    }
    ```
---
layout: markdown
content:
  title: Queries with Names
  markup: |
    ```graphql
    query getTheme {
      themes {
        primaryColor
      }
      theme(name: "survivejs") {
        primaryColor
        secondaryColor
        background
      }
    }
    ```
---
layout: markdown
content:
  title: Queries with Variables
  markup: |
    ```graphql
    {
      theme(name: @themeName) {
        primaryColor
      }
    }
    ```

    **Variables**

    ```json
    {
      "themeName": "survivejs"
    }
    ```
---
layout: markdown
content:
  title: Fragments
  markup: |
    ```graphql
    fragment SponsorFragment on Contact {
      name
    }

    query RootQuery($conferenceId: ID!) {
      conference(id: $conferenceId) {
        partners {
          ...SponsorFragment
        }
        goldSponsors {
          ...SponsorFragment
        }
      }
    }
    ```
---
layout: markdown
content:
  title: Aliases
  markup: |
    ```graphql
    {
      colors: themes {
        primaryColor
      }
    }
    ```
---
layout: markdown
content:
  title: Mutations
  markup: |
    ```graphql
    mutation {
      changeTheme(
        presentationName: "intro-to-graphql",
        themeName: "survivejs"
      ) {
        name
        theme {
          name
        }
      }
    }
    ```
---
layout: markdown
content:
  title: Playgrounds
  markup: |
    * [GraphiQL](https://github.com/graphql/graphiql#graphiql)
    * [GraphQL Playground](https://www.npmjs.com/package/graphql-playground)
---
layout: markdown
content:
  title: Clients
  markup: |
    * [graphql-request](https://www.npmjs.com/package/graphql-request)
    * [urql](https://www.npmjs.com/package/urql)
    * [Relay](https://www.npmjs.com/package/react-relay)
    * [Apollo Client](https://www.npmjs.com/package/apollo-client)
---
layout: markdown
content:
  title: Exercises
  markup: |
    1. How many speakers does GraphQL Finland 2018 have? [API](https://api.react-finland.fi/graphql). [Source](https://github.com/ReactFinland/graphql-api).
      > Use `conferenceId` `graphql-finland-2018` as an `id` to the `conference` query. See the schema explorer. You can count the data using a little script or perform the request using [graphql-request](https://www.npmjs.com/package/graphql-request) and then process it further.
---
layout: markdown
content:
  title: Exercises
  markup: |
    2. What was the title and release date of the first Star Wars movie? [API](https://graphql.org/swapi-graphql/). [Source](https://github.com/graphql/swapi-graphql).
    3. How many open source licenses is GitHub aware of? [API](https://developer.github.com/v4/explorer/). [Documentation](https://developer.github.com/v4/).
    4. What are the names of the followers of the user `LinusTorvalds` in GitHub? (Not to be confused with Linux Linus.)
---
layout: markdown
content:
  title: Exercises
  markup: |
    5. Choose a client from the list and try performing some of the queries using it.
---
layout: section
content:
  title: GraphQL Schema
---
layout: markdown
content:
  title: GraphQL Schema Definition Language (SDL)
  markup: |
    * A definition language is used to define an API
    * Separate language to describe types and their relations
    * In addition code implementing **Queries** and **Mutations** is needed
---
layout: markdown
content:
  title: Types
  markup: |
    ```graphql
    type Presentation {
      name: String!
      theme: Theme!
      slides: [Slide]!
    }
    ```
---
layout: markdown
content:
  title: Enums
  markup: |
    ```graphql
    enum Layout {
      TITLE
      SECTION
      EMBED
      MARKDOWN
    }
    ```
---
layout: markdown
content:
  title: Unions
  markup: |
    ```graphql
    union ContentType =
        TitleContent
      | SectionContent
      | EmbedContent
      | MarkdownContent
    ```
---
layout: markdown
content:
  title: Interfaces
  markup: |
    ```graphql
    interface Content {
      title: String
      background: ContentBackground
    }
    ```
---
layout: markdown
content:
  title: Queries
  markup: |
    ```graphql
    type Query {
      themes: [Theme]!
      theme(name: String!): Theme
      presentations: [Presentation]!
      presentation(name: String!): Presentation
    }
    ```
---
layout: markdown
content:
  title: Mutations
  markup: |
    ```graphql
    type Mutation {
      changeTheme(
        presentationName: String!,
        themeName: String!
      ): Presentation
    }
    ```
---
layout: markdown
content:
  title: Introspection
  markup: |
    ```graphql
    {
      __schema {
        types {
          name
        }
      }
    }
    ```
---
layout: markdown
content:
  title: Integrating GraphQL with Tools
  markup: |
    * [graphql-config](https://www.npmjs.com/package/graphql-config)
    * [eslint-plugin-graphql](https://www.npmjs.com/package/eslint-plugin-graphql)
    * [type-graphql](https://www.npmjs.com/package/type-graphql)
    * [graphql-code-generator](https://www.npmjs.com/package/graphql-code-generator)
    * [graphqlviz](https://www.npmjs.com/package/graphqlviz)
---
layout: markdown
content:
  title: Exercises
  markup: |
    1. What's the difference between an `Interface` and a `Union`?
    2. Model a schema for a small API. You can use this presentation as an example.
    3. Where would you use introspection?
    4. Try [graphqlviz](https://www.npmjs.com/package/graphqlviz) against an API.
---
layout: section
content:
  title: Implementing a Server
---
layout: markdown
content:
  title: Servers
  markup: |
    * [GraphQL.js](https://www.npmjs.com/package/graphql)
    * [graphql-yoga](https://www.npmjs.com/package/graphql-yoga)
    * [Prisma](https://www.npmjs.com/package/prisma)
    * **[Apollo Server](https://www.npmjs.com/package/apollo-server)**
    * [graphpack](https://github.com/glennreyes/graphpack)*
---
layout: embed
content:
  title: Apollo Server
  link: https://www.apollographql.com/docs/apollo-server/
---
layout: markdown
content:
  markup: |
    > [Let's jump to Sara's material now for the rest!](https://github.com/SaraVieira/graphql-workshop)
---
layout: section
content:
  title: Solutions
---
layout: markdown
content:
  title: Answers 2-1
  markup: |
    ```graphql
    {
      conference(id: "graphql-finland-2018") {
        speakers {
          name
        }
      }
    }
    ```
---
layout: markdown
content:
  title: Answers 2-2
  markup: |
    ```graphql
    {
      allFilms {
        films {
          title
          releaseDate
        }
      }
    }
    ```
---
layout: markdown
content:
  title: Answers 2-3
  markup: |
    ```graphql
    query {
      licenses {
        name
      }
    }
    ```
---
layout: markdown
content:
  title: Answers 2-4
  markup: |
    ```graphql
    query {
      user(login: "LinusTorvalds") {
        followers(first: 10) {
          nodes {
            name
          }
        }
      }
    }
    ```

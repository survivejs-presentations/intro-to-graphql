type Query {
  themes: [Theme]!
  theme(id: ID!): Theme
  presentations: [Presentation]!
  presentation(id: ID!): Presentation
  gitDiff: String!
}

type Mutation {
  changePresentationTheme(
    presentationID: ID!
    themeID: ID!
  ): ChangePresentationThemeResult
  updateSlideContent(
    slideIndex: Int!
    presentationID: ID!
    content: ContentInput!
  ): UpdateSlideContentResult
}

input ContentInput {
  author: String
  title: String
}
type ChangePresentationThemeResult {
  theme: Theme!
  gitDiff: String!
}
type UpdateSlideContentResult {
  # TODO: Try to convert to ConvertType for a general solution
  content: Content!
  gitDiff: String!
}

type Presentation {
  id: ID!
  slides: [Slide]!
}

type Slide {
  # The first slide contains theme by convention for now
  theme: Theme
  layout: Layout!
  content: ContentType!
  background: Image
  skip: Boolean
}

type Theme {
  id: ID!
  primaryColor: String!
  secondaryColor: String!
  background: String!
}

enum Layout {
  TITLE
  SECTION
  IMAGE
  EMBED
  MARKDOWN
  GRID
}

union ContentType =
    Image
  | TitleContent
  | SectionContent
  | EmbedContent
  | MarkdownContent
  | GridContent

type Image {
  asset: String!
  source: String
}

interface Content {
  title: String
}

type TitleContent implements Content {
  title: String
  author: String
}

type SectionContent implements Content {
  title: String
}

type EmbedContent implements Content {
  title: String
  link: String!
}

type MarkdownContent implements Content {
  title: String
  markup: String!
}

type GridContent implements Content {
  title: String
  columns: [String]!
}
